test_contrast(lm1b)
test_contrast(gpt2)
# Chunk 7
diff_mean_stat <- function(data, labels, labelX, labelY) {
x <- data[labels==labelX]
y <- data[labels==labelY]
return(mean(x) - mean(y))
}
permute_diff_mean <- function(data, labels, labelX, labelY) {
return(diff_mean_stat(data, sample(labels, length(labels), replace=F), labelX, labelY))
}
test_contrast_permute <- function(tbl, iter=1e5) {
tests <- vector('list', n_forms)
for (i in 1:n_forms) {
data <- tbl %>% filter(Experiment==i & Correct==T)
t_obs <- diff_mean_stat(data$Inference, data$Conn.Type, 'Summary', 'Contrast')
perm_dist <- replicate(iter, permute_diff_mean(data$Inference, data$Conn.Type, 'Summary', 'Contrast'))
p_val <- min(mean(t_obs > perm_dist), mean(t_obs < perm_dist)) * 2  # 2-sided
tests[[i]] <- list(p=p_val, dist=perm_dist)
}
}
test_contrast_permute(lm1b)
x<-test_contrast_permute(lm1b)
test_contrast_permute <- function(tbl, iter=1e5) {
tests <- vector('list', n_forms)
for (i in 1:n_forms) {
data <- tbl %>% filter(Experiment==i & Correct==T)
t_obs <- diff_mean_stat(data$Inference, data$Conn.Type, 'Summary', 'Contrast')
perm_dist <- replicate(iter, permute_diff_mean(data$Inference, data$Conn.Type, 'Summary', 'Contrast'))
p_val <- min(mean(t_obs > perm_dist), mean(t_obs < perm_dist)) * 2  # 2-sided
print(p_val)
print(perm_dist)
tests[[i]] <- list(p=p_val, dist=perm_dist)
}
return(tests)
}
test_contrast_permute(lm1b)
x
i=1
tbl=lm_1b
tbl=lm1b
iter=1e2
data <- tbl %>% filter(Experiment==i & Correct==T)
t_obs <- diff_mean_stat(data$Inference, data$Conn.Type, 'Summary', 'Contrast')
perm_dist <- replicate(iter, permute_diff_mean(data$Inference, data$Conn.Type, 'Summary', 'Contrast'))
p_val <- min(mean(t_obs > perm_dist), mean(t_obs < perm_dist)) * 2  # 2-sided
print(p_val)
print(perm_dist)
tests <- vector('list', n_forms)
tests[[i]] <- list(p=p_val, dist=perm_dist)
tests
tests[[2]]<-list(p=p_val, dist=perm_dist)
tests
tbl_df(t(sapply(tests, c)))
as.df(tests)
data.frame(tests)
x<-data.frame(tests)
View(x)
test_contrast_permute <- function(tbl, iter=1e5) {
tests <- vector('list', n_forms)
for (i in 1:n_forms) {
data <- tbl %>% filter(Experiment==i & Correct==T)
t_obs <- diff_mean_stat(data$Inference, data$Conn.Type, 'Summary', 'Contrast')
perm_dist <- replicate(iter, permute_diff_mean(data$Inference, data$Conn.Type, 'Summary', 'Contrast'))
p_val <- min(mean(t_obs > perm_dist), mean(t_obs < perm_dist)) * 2  # 2-sided
print(p_val)
print(perm_dist)
tests[[i]] <- list(p=p_val, dist=perm_dist)
}
return(tbl_df(t(sapply(tests, c))))
}
x<-test_contrast_permute(lm1b, iter=1e3)
x
x$p
as.numeric(x$dist)
test_contrast_permute <- function(tbl, iter=1e5) {
tests <- vector('list', n_forms)
for (i in 1:n_forms) {
data <- tbl %>% filter(Experiment==i & Correct==T)
t_obs <- diff_mean_stat(data$Inference, data$Conn.Type, 'Summary', 'Contrast')
perm_dist <- replicate(iter, permute_diff_mean(data$Inference, data$Conn.Type, 'Summary', 'Contrast'))
p_val <- min(mean(t_obs > perm_dist), mean(t_obs < perm_dist)) * 2  # 2-sided
tests[[i]] <- list(p=p_val, dist=perm_dist)
}
tests_tbl <- tbl_df(t(sapply(tests, c))) %>%
mutate(p=as.numeric(p))
return(tests_tbl)
}
test_contrast_permute(lm1b)
test_contrast_permute(lm1b)
test_contrast_permute(lm1b, iter=1e3)
test_contrast_permute <- function(tbl, iter=1e5) {
tests <- vector('list', n_forms)
for (i in 1:n_forms) {
data <- tbl %>% filter(Experiment==i & Correct==T)
t_obs <- diff_mean_stat(data$Inference, data$Conn.Type, 'Summary', 'Contrast')
perm_dist <- replicate(iter, permute_diff_mean(data$Inference, data$Conn.Type, 'Summary', 'Contrast'))
p_val <- min(mean(t_obs > perm_dist), mean(t_obs < perm_dist)) * 2  # 2-sided
tests[[i]] <- list(p=p_val, obs=t_obs, dist=perm_dist)
}
tests_tbl <- tbl_df(t(sapply(tests, c))) %>%
mutate(p=as.numeric(p)) %>%
mutate(obs=as.numeric(obs))
return(tests_tbl)
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(Hmisc)
library(tidyverse)
set.seed(42)
forms <- c(1, 2, 6, 7)
connective_contrasts <- c(", but then, ", "; but then, ", ", on the other hand, ", "; on the other hand, ",
"; by contrast, ", ", by contrast, ")
connective_summaries <- c(", thus, ", "; thus, ", ", that is, ", "; that is, ", ", therefore, ", "; therefore, ",
", in short, ", "; in short, ", ", again, ", "; again, ", ", I repeat, ", "; I repeat, ")
results2tbl <- function(prefix, n) {
# Bind all n results tsv's into one tbl, add experiment number column
for (i in n) {
input <- read.csv(paste(prefix, i, '.tsv', sep=''), sep='\t') %>%
mutate(Experiment=i)
if (i == 1) results <- tbl_df(input)
else results <- bind_rows(results, input)
}
# Convert string T/F to boolean
results <- results %>% mutate(correct=(correct=="True")) %>%
mutate(crossing=(crossing=="True"))
# Include column for connective type
results <- results %>%
mutate(Conn.Type=ifelse(X.Conn. %in% connective_summaries, "Summary", ifelse(X.Conn. %in% connective_contrasts, "Contrast", "ERR")))
# Capitalize
names(results) <- capitalize(names(results))
return(results)
}
lm1b <- results2tbl('lm1b_', forms)
gpt2 <- results2tbl('gpt2_', forms)
# Just a taste...
print(sample_n(lm1b, 10))
print(sample_n(gpt2, 10))
library(boot)
stat <- function(x, indices) {
data <- x[indices,]
return(mean(filter(data, Conn.Type=='Summary')$Inference) -
mean(filter(data, Conn.Type=='Contrast')$Inference))
}
result <- boot(lm1b, statistic=stat, R=1e4)
filter(lm1b, Conn.Type='Summary')
filter(lm1b, Conn.Type=='Summary')
library(Hmisc)
library(tidyverse)
set.seed(42)
forms <- c(1, 2, 6, 7)
connective_contrasts <- c(", but then, ", "; but then, ", ", on the other hand, ", "; on the other hand, ",
"; by contrast, ", ", by contrast, ")
connective_summaries <- c(", thus, ", "; thus, ", ", that is, ", "; that is, ", ", therefore, ", "; therefore, ",
", in short, ", "; in short, ", ", again, ", "; again, ", ", I repeat, ", "; I repeat, ")
results2tbl <- function(prefix, n) {
# Bind all n results tsv's into one tbl, add experiment number column
for (i in n) {
input <- read.csv(paste(prefix, i, '.tsv', sep=''), sep='\t') %>%
mutate(Experiment=i)
if (i == 1) results <- tbl_df(input)
else results <- bind_rows(results, input)
}
# Convert string T/F to boolean
results <- results %>% mutate(correct=(correct=="True")) %>%
mutate(crossing=(crossing=="True"))
# Include column for connective type
results <- results %>%
mutate(Conn.Type=ifelse(X.Conn. %in% connective_summaries, "Summary", ifelse(X.Conn. %in% connective_contrasts, "Contrast", "ERR")))
# Capitalize
names(results) <- capitalize(names(results))
return(results)
}
lm1b <- results2tbl('lm1b_', forms)
gpt2 <- results2tbl('gpt2_', forms)
# Just a taste...
print(sample_n(lm1b, 10))
print(sample_n(gpt2, 10))
test_contrast_t <- function(tbl) {
tests <- vector('list', length(forms))
for (i in 1:length(forms)) {  # We do weird indexing to be able to still analyze when not all forms (1-7) are available
S_match_summary <- tbl %>% filter(Experiment==forms[i] & Correct==T & Conn.Type=='Summary') %>% select(Inference)
S_match_contrast <- tbl %>% filter(Experiment==forms[i] & Correct==T & Conn.Type=='Contrast') %>% select(Inference)
test <- t.test(S_match_summary, S_match_contrast, var.equal=F)
tests[[i]] <- test
}
return(tests)
}
ctlm1b <- test_contrast_t(lm1b)
ctgpt2 <- test_contrast_t(gpt2)
ctlm1b
ctgpt2
diff_mean_stat <- function(data, labels, labelX, labelY) {
x <- data[labels==labelX]
y <- data[labels==labelY]
return(mean(x) - mean(y))
}
permute_diff_mean <- function(data, labels, labelX, labelY) {
return(diff_mean_stat(data, sample(labels, length(labels), replace=F), labelX, labelY))
}
test_contrast_permute <- function(tbl, iter=1e5) {
tests <- vector('list', length(forms))
labelX <- 'Summary'
labelY <- 'Contrast'
for (i in 1:length(forms)) {
# Setup
data <- tbl %>% filter(Experiment==forms[i] & Correct==T)
labels <- data$Conn.Type
data <- data$Inference
t.obs <- diff_mean_stat(data, labels, labelX, labelY)
# Generate one permutation and calculate the difference of means statistic
perm_dist <- replicate(iter, permute_diff_mean(data, labels, labelX, labelY))
# Get p-value
# p <- min(mean(t.obs > perm_dist), mean(t.obs < perm_dist)) * 2  # 2-sided
p <- mean(perm_dist < t.obs)
tests[[i]] <- list(p=p, DiffMean=t.obs, NullDistribution=perm_dist)
}
# Convert funky list into a nice tbl
tests_tbl <- tbl_df(t(sapply(tests, c))) %>%
mutate(p=as.numeric(p)) %>%
mutate(DiffMean=as.numeric(DiffMean))
return(tests_tbl)
}
contrasts <- bind_rows(
cplm1b %>% rownames_to_column(var='Experiment') %>% mutate(Model='LM1B'),
cpgpt2 %>% rownames_to_column(var='Experiment') %>% mutate(Model='GPT2')
)
ggplot(contrasts, aes(x=Experiment, y=DiffMean, fill=Model)) +
geom_bar(stat="identity", position="dodge")
# scale_x_continuous(breaks=1:n_forms) +
# xlab("Mean S(Contradiction)-S(Entailment), per-Experiment")
library(boot)
stat <- function(x, indices) {
data <- x[indices,]
return(mean(filter(data, Conn.Type=='Summary')$Inference) -
mean(filter(data, Conn.Type=='Contrast')$Inference))
}
result <- boot(lm1b, statistic=stat, R=1e4)
boot.ci(result)
View(result)
result
stat(lm1b, len(lm1b))
stat(lm1b, length(lm1b))
length(lm1b)
nrow(lm1b)
stat(lm1b, nrow(lm1b))
View(lm1b)
lm1b$Conn.Type
lm1b[c(1),]
lm1b[nrow(lm1b)]
lm1b[nrow(lm1b),]
lm1b[1:nrow(lm1b),]
stat(lm1b, 1:nrow(lm1b))
stat(lm1b, 1:100)
lm1b[1:100]$Conn.Type
lm1b[1:100,]$Conn.Type
x<-lm1b
indices=1:1000
data <- x[indices,]
(filter(data, Conn.Type=='Summary')$Inference) -
mean(filter(data, Conn.Type=='Contrast')$Inference))
}
result <- boot(lm1b, statistic=stat, R=1e4)
boot.ci(result, conf=0.95, type='basic')
# BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
mean(filter(data, Conn.Type=='Summary')$Inference)
data$Conn.Type
filter(data, Conn.Type=='a')
data[Conn.Type=='Summary']$Inference
data[data.Conn.Type=='Summary']$Inference
data[data$Conn.Type=='Summary']$Inference
data$Conn.Type=='Summary'
data[data$Conn.Type=='Summary',]
result <- boot(lm1b, statistic=stat, R=1e4)
library(boot)
stat <- function(x, indices) {
data <- x[indices,]
return(mean(filter(data, Conn.Type=='Summary')$Inference) -
mean(filter(data, Conn.Type=='Contrast')$Inference))
}
result <- boot(lm1b, statistic=stat, R=1e4)
View(lm1b)
test_contrast_t <- function(tbl) {
tests <- vector('list', length(forms))
for (i in 1:length(forms)) {  # We do weird indexing to be able to still analyze when not all forms (1-7) are available
S_match_summary <- tbl %>% filter(Experiment==forms[i] & Correct==T & Conn.Type=='Summary') %>% select(Inference)
S_match_contrast <- tbl %>% filter(Experiment==forms[i] & Correct==T & Conn.Type=='Contrast') %>% select(Inference)
test <- t.test(S_match_summary, S_match_contrast, var.equal=F)
tests[[i]] <- test
}
return(tests)
}
ctlm1b <- test_contrast_t(lm1b)
ctgpt2 <- test_contrast_t(gpt2)
library(Hmisc)
library(tidyverse)
set.seed(42)
forms <- c(1, 2, 6, 7)
connective_contrasts <- c(", but then, ", "; but then, ", ", on the other hand, ", "; on the other hand, ",
"; by contrast, ", ", by contrast, ")
connective_summaries <- c(", thus, ", "; thus, ", ", that is, ", "; that is, ", ", therefore, ", "; therefore, ",
", in short, ", "; in short, ", ", again, ", "; again, ", ", I repeat, ", "; I repeat, ")
results2tbl <- function(prefix, n) {
# Bind all n results tsv's into one tbl, add experiment number column
for (i in n) {
input <- read.csv(paste(prefix, i, '.tsv', sep=''), sep='\t') %>%
mutate(Experiment=i)
if (i == 1) results <- tbl_df(input)
else results <- bind_rows(results, input)
}
# Convert string T/F to boolean
results <- results %>% mutate(correct=(correct=="True")) %>%
mutate(crossing=(crossing=="True"))
# Include column for connective type
results <- results %>%
mutate(Conn.Type=ifelse(X.Conn. %in% connective_summaries, "Summary", ifelse(X.Conn. %in% connective_contrasts, "Contrast", "ERR")))
# Capitalize
names(results) <- capitalize(names(results))
return(results)
}
lm1b <- results2tbl('lm1b_', forms)
gpt2 <- results2tbl('gpt2_', forms)
library(boot)
stat <- function(x, indices) {
data <- x[indices,]
return(mean(filter(data, Conn.Type=='Summary')$Inference) -
mean(filter(data, Conn.Type=='Contrast')$Inference))
}
stat(lm1b, 1:nrow(lm1b))
i=7
tbl = lm1b
# Setup
data <- tbl %>% filter(Experiment==forms[i] & Correct==T)
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter)
# Do boostrap
b <- boot(data=data, statistic=diff_mean_stat, R=iter)
?boot
View(lm1b)
forms[7]
i=4
forms[4]
# Setup
data <- tbl %>% filter(Experiment==forms[i] & Correct==T)
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter)
iter=1e4
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=Conn.Type)
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata="Conn.Type")
traceback()
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$Conn.Type)
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$Conn.Type)
# Setup
data <- tbl %>% filter(Experiment==forms[i] & Correct==T) %>% mutate(strata=ifelse(Conn.Type=='Summary', 1, ifelse(Conn.Type=='Contrast', 0, 'ERR')))
View(data)
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$strata)
diff_mean_stat <- function(x, indices) {
data <- x[indices,]
return(mean(filter(data, Conn.Type=='Summary')$Inference) -
mean(filter(data, Conn.Type=='Contrast')$Inference))
}
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$strata)
View(b)
# Get CI
ci <- boot.ci(result, conf=0.95, type='basic')
# Get CI
ci <- boot.ci(b, conf=0.95, type='basic')
ci
# Get CI
ci <- boot.ci(b, conf=0.95, type='studentized')
ci
?boot.ci
# Get CI
ci <- boot.ci(b, conf=0.95, type='bca')
c
ci
data(aml, package = "boot")
surv
survfit(Surv(time, cens) ~ group, data = data)
stratify
stratify(lm1b$Conn.Type)
s<-stratify(lm1b$Conn.Type)
s[1]
s[2]
s[3]
s[1,]
s[[1]]
s[[2]]
s
# Setup
data <- tbl %>% filter(Experiment==forms[i] & Correct==T)
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=stratify(data$Conn.Type))
# Get CI
ci <- boot.ci(b, conf=0.95, type='basic')
ci
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$strata)
# Setup
data <- tbl %>% filter(Experiment==forms[i] & Correct==T) %>% mutate(strata=ifelse(Conn.Type=='Summary', 1, ifelse(Conn.Type=='Contrast', 0, 'ERR')))
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$strata)
# Get CI
ci <- boot.ci(b, conf=0.95, type='basic')
ci
# Setup
data <- tbl %>% filter(Experiment==forms[i] & Correct==T) %>% mutate(strata=ifelse(Conn.Type=='Summary', 1, ifelse(Conn.Type=='Contrast', 2, 'ERR')))
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$strata)
# Get CI
ci <- boot.ci(b, conf=0.95, type='basic')
ci
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$strata)
# Get CI
ci <- boot.ci(b, conf=0.95, type='basic')
ci
stratify(data[1:4,]$Conn.Type)
?stratify
Hmisc::stratify
ci
ci$R
ci$t0
ci$call
ci$basic
View(ci)
?boot.ci
diff_mean_stat(data, 1:nrow(data))
ci$basic[2]
ci$basic[3]
ci$basic[3:4]
ci$basic[4:5]
forms=c(1)
tests <- vector('list', length(forms))
for (i in 1:length(forms)) {
# Setup
data <- tbl %>%
filter(Experiment==forms[i] & Correct==T) %>%
mutate(strata=ifelse(Conn.Type=='Summary', 1, ifelse(Conn.Type=='Contrast', 2, 'ERR')))
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$strata)
# Get CI
ci <- boot.ci(b, conf=0.95, type='basic')
tests[[i]] <- list(lower=ci$basic[4], upper=ci$basic[5], boot=b)
}
View(tests)
# Convert funky list into a nice tbl
tests_tbl <- tbl_df(t(sapply(tests, c))) %>%
mutate(p=as.numeric(p)) %>%
mutate(DiffMean=as.numeric(DiffMean))
# Convert funky list into a nice tbl
tests_tbl <- tbl_df(t(sapply(tests, c)))
View(tests_tbl)
View(tests_tbl[[3]][[1]])
View(ci)
diff_mean_stat(data, 1:nrow(data))
tests_tbl
tbl_df(tests)
tbl_df(tests)
View(tests)
tests[[1]]
names(tests[[1]])
tbl_df(tests, .name_repair=names(tests[[1]]))
?tbl_df
data.frame(tests)
?tbl_df
as_tibble(tests, .name_repair=names(tests[[1]]))
as_tibble(tests, column_name=names(tests[[1]]))
as_tibble(tests, .name_repair='minimal')
as_tibble(tests, .name_repair='unique')
t
?t
sapply(tests, )
sapply(tests, c)
as_tibble(t(tests), .name_repair='minimal')
# Convert funky list into a nice tbl
tests_tbl <- tbl_df(t(sapply(tests, c))) %>%
mutate(Diff.Mean=as.numeric(Diff.Mean), CI.lower=as.numeric(CI.lower), CI.upper=as.numeric(CI.upper))
tests[[i]] <- list(Diff.Mean=b$t0, CI.lower=ci$basic[4], CI.upper=ci$basic[5], boot.obj=b)
# Convert funky list into a nice tbl
tests_tbl <- tbl_df(t(sapply(tests, c))) %>%
mutate(Diff.Mean=as.numeric(Diff.Mean), CI.lower=as.numeric(CI.lower), CI.upper=as.numeric(CI.upper))
tests_tbl
.0029+.0286
.0315/2
forms <- c(1, 2, 6, 7)
diff_mean.CI <- function(tbl, iter=1e4) {
tests <- vector('list', length(forms))
for (i in 1:length(forms)) {
# Setup
data <- tbl %>%
filter(Experiment==forms[i] & Correct==T) %>%
mutate(strata=ifelse(Conn.Type=='Summary', 1, ifelse(Conn.Type=='Contrast', 2, 'ERR')))
# Do boostrap
b <- boot(data, statistic=diff_mean_stat, R=iter, strata=data$strata)
ci <- boot.ci(b, conf=0.95, type='basic')
# Save statistic, basic confidence interval, and boostrap object for posterity
tests[[i]] <- list(Diff.Mean=b$t0, CI.lower=ci$basic[4], CI.upper=ci$basic[5], boot.obj=b)
}
# Convert funky list into a nice tbl
tests_tbl <- tbl_df(t(sapply(tests, c))) %>%
mutate(Diff.Mean=as.numeric(Diff.Mean), CI.lower=as.numeric(CI.lower), CI.upper=as.numeric(CI.upper))
return(tests_tbl)
}
diff_mean.CI(lm1b)
